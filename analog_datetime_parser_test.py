#!/usr/bin/env python3

import unittest

from datetime import datetime

from analog_datetime_parser import parse


class TestParsing(unittest.TestCase):

    def test_basic_parsing(self):
        '''
        Check that an OK date returns a datetime and that seriously
        invalid things throw ValueError
        '''
        self.assertIsInstance(parse('20001231'), datetime, 'valid day')
        with self.assertRaises(ValueError, msg='invalid month'):
            parse('20001331')
        with self.assertRaises(ValueError, msg='invalid format'):
            parse('Foo')

    def test_abs_dates(self):
        '''
        Check parsing of various absolute date formats
        '''
        abs_dates = (
            ['19990101',      '1999-01-01T00:00:00'],
            ['20000101',      '2000-01-01T00:00:00'],
            ['20000102',      '2000-01-02T00:00:00'],
            ['20000202',      '2000-02-02T00:00:00'],
            ['20000202:1234', '2000-02-02T12:34:00'],

            ['19990701',      '1999-07-01T00:00:00'],
            ['20000615:1300', '2000-06-15T13:00:00'],
        )

        for test in abs_dates:
            self.assertEqual(parse(test[0]).isoformat(), test[1], 'trying ' + test[0])

    def test_relative_dates(self):
        '''
        Check parsing of various relative date formats
        '''

        base = datetime(
            year=1960,
            month=3,
            day=5,
            hour=12,
            minute=34,
            second=56,
        )

        rel_dates = (
            ['+0000+00+00',            '1960-03-05T00:00:00'],

            ['+0001+00+00',            '1961-03-05T00:00:00'],
            ['+000001+00+00',          '1961-03-05T00:00:00'],
            ['-0001+00+00',            '1959-03-05T00:00:00'],

            ['+0000+01+00',            '1960-04-05T00:00:00'],
            ['+0000+0001+00',          '1960-04-05T00:00:00'],
            ['+0000+12+00',            '1961-03-05T00:00:00'],
            ['+0000-01+00',            '1960-02-05T00:00:00'],
            ['+0000-12+00',            '1959-03-05T00:00:00'],

            ['+0000+00+01',            '1960-03-06T00:00:00'],
            ['+0000+00+0001',          '1960-03-06T00:00:00'],
            ['+0000+00+31',            '1960-04-05T00:00:00'],
            ['+0000+00+365',           '1961-03-05T00:00:00'],
            ['+0000+00-01',            '1960-03-04T00:00:00'],
            ['+0000+00-29',            '1960-02-05T00:00:00'],
            ['+0000+00-366',           '1959-03-05T00:00:00'],

            ['2000+00+00',             '2000-03-05T00:00:00'],
            ['+000001+00',             '1960-01-05T00:00:00'],
            ['+0000+0001',             '1960-03-01T00:00:00'],

            ['200001+00',              '2000-01-05T00:00:00'],
            ['2000+0001',              '2000-03-01T00:00:00'],
            ['+00000101',              '1960-01-01T00:00:00'],

            ['+0000+0030',             '1960-03-30T00:00:00'],
            ['+0000+0031',             '1960-03-31T00:00:00'],
            ['+0000+0032',             '1960-03-31T00:00:00'],

            ['+0000-0128',             '1960-02-28T00:00:00'],
            ['+0000-0129',             '1960-02-29T00:00:00'],
            ['+0000-0130',             '1960-02-29T00:00:00'],

            ['+0000+00+00:+00+00',     '1960-03-05T12:34:00'],
            ['+0000+00+00:+01+00',     '1960-03-05T13:34:00'],
            ['+0000+00+00:+0001+00',   '1960-03-05T13:34:00'],
            ['+0000+00+00:+12+00',     '1960-03-06T00:34:00'],
            ['+0000+00+00:-01+00',     '1960-03-05T11:34:00'],
            ['+0000+00+00:-13+00',     '1960-03-04T23:34:00'],

            ['+0000+00+00:+00+01',     '1960-03-05T12:35:00'],
            ['+0000+00+00:+00+0001',   '1960-03-05T12:35:00'],
            ['+0000+00+00:+00+26',     '1960-03-05T13:00:00'],
            ['+0000+00+00:+00-01',     '1960-03-05T12:33:00'],
            ['+0000+00+00:+00-35',     '1960-03-05T11:59:00'],

            ['+0000+00+00:00+00',      '1960-03-05T00:34:00'],
            ['+0000+00+00:+0000',      '1960-03-05T12:00:00'],
            ['+0000+00+00:0000',       '1960-03-05T00:00:00'],

            ['-0001-00+01',            '1959-03-06T00:00:00'],
            ['-0000-0131',             '1960-02-29T00:00:00'],
            ['-0000-00-112',           '1959-11-14T00:00:00'],
            ['-0000-00-01',            '1960-03-04T00:00:00'],
            ['-0000-00-00:-06+01',     '1960-03-05T06:35:00'],
            ['-0000-00-01:1800',       '1960-03-04T18:00:00'],
        )

        for test in rel_dates:
            self.assertEqual(parse(test[0], base).isoformat(), test[1], 'trying ' + test[0])


if __name__ == '__main__':
    unittest.main()
